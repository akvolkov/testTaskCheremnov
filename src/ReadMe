1.Расчет факториала. На вход программе подается число, на выходе факториал этого
числа. Например:
Input: 4
Output: 24

Решение:
Сделана реализация простого алгоритма нахождения факториала.
На ввод подается число типа Integer, на вывод - BigInteger.
Ввод/вывод зациклен, для выхода из цикла необходимо ввести - "exit".

2. Поиск количества вхождений слова в тексте. На вход программе подается имя
файла с текстом и слово, на выходе число вхождений данного слова в тексте.
Например:
Input: c:\some_text.txt test
Output: 25

Решение:
Формат ввода строки в консоль: путь_тестовое слово.
Все что личше отбрасывется. Берутся только первые два члена массива.
При поиске учитывается регистр букв

3. Реализация простейшего калькулятора. Доступны четыре арифметических
действия: сложение (+), умножение (*), деление (/) и вычитание (-). На вход
программе подается строка вида [число][ариф. знак][число], на выходе результат
операции.
Например:
Input: 4+7
Output: 11


4. Утилита для копирования файлов. На вход программе подается имя копируемого
файла и имя для конечного файла. Дополнительные условия:
•на консоль должно выводиться время, потраченное на копирование файла;
•алгоритм оптимальным.

Решение: Что значит оптимальным?
Если наиболее быстрым - то это способ с использованием потоков.
Если рассматривать оптимальность, как кол-во строк кода - то использование библиотеки Apache Commons IO,
но ее надо дополнительно добавлять в проект.
Или же, как вариант без добавления в проект доп. библиотек, пользоваться классом Files Java 7.
https://javadevblog.com/kak-skopirovat-fajl-v-java-4-sposoba-primery-i-kod.html
В статье, по ссылке выше, проводится  простенький бенчмаркет.
На него конечно не стоит полагаться в больших проектах, так как тестировать на производительность надо
по всем параметрам. В разных ситуациях тестирование может показать себя по разному, и надо учитывать разные
факторы влияющие на скорость копирования, а не только 1 раз скопировать файл 1 Гб. Может быть стоит сравнить
результаты и на "прогретой" виртуальной машине, и прогнать кучку маленьких файлов. И сравнивать результаты
на этих данных.

Свою реализацию сделал через потоки. Абсолютные пути файлов подаются параметрами (args) в точку входа программы.
для IDEA меню Run -> Edit Configuration -> Application в поле Program Arguments указываете аргументы через пробел.